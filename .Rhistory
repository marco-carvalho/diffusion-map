sep = ""
)
)
plot(
x = eigen_matrix(l)$vectors[,2],
y = eigen_matrix(l)$vectors[,3],
col = 1:length(unique(df.col)),
pch = 16
)
legend(
x = 'center',
y = 'groups',
legend = unique(df.col),
col = 1:length(df.col),
pch = 16
)
dev.off()
#}
################################################################################
# downloading packages
################################################################################
# install.packages("plot3D")
################################################################################
# using downloaded packages
################################################################################
# library("plot3D")
################################################################################
# using lib
################################################################################
source("lib.R")
################################################################################
# defining df and variables
################################################################################
df <- iris_df()
df.col <- iris_color_index()
epsilon <- 0.1
alpha <- 0.5
################################################################################
# create the diffusion matrix from a normalized df
################################################################################
l <- as.matrix(
x = dist(
data.frame(
apply(
X = df,
MARGIN = 2,
FUN = normalize_column
)
)
)
)
################################################################################
# saving the eigenvectors plot by: defining the filename, ploting and saving
################################################################################
plot(
x = eigen_matrix(l)$vectors[,2],
y = eigen_matrix(l)$vectors[,3],
col = 1:length(unique(df.col)),
pch = 16
)
legend(
x = 'center',
y = 'groups',
legend = unique(df.col),
col = 1:length(df.col),
pch = 16
)
library("plot3D")
################################################################################
# downloading packages
################################################################################
# install.packages("plot3D")
################################################################################
# using downloaded packages
################################################################################
library("plot3D")
################################################################################
# using lib
################################################################################
source("lib.R")
################################################################################
# defining df and variables
################################################################################
df <- iris_df()
df.col <- iris_color_index()
epsilon <- 0.1
alpha <- 0.5
################################################################################
# create the diffusion matrix from a normalized df
################################################################################
l <- as.matrix(
x = dist(
data.frame(
apply(
X = df,
MARGIN = 2,
FUN = normalize_column
)
)
)
)
################################################################################
# saving the eigenvectors plot by: defining the filename, ploting and saving
################################################################################
scatter3D(
x = eigen_matrix(l)$vectors[,2],
y = eigen_matrix(l)$vectors[,3],
z = eigen_matrix(l)$vectors[,3],
col = 1:length(unique(df.col)),
pch = 16
)
legend(
x = 'center',
y = 'groups',
legend = unique(df.col),
col = 1:length(df.col),
pch = 16
)
scatter3D(
x = eigen_matrix(l)$vectors[,2],
y = eigen_matrix(l)$vectors[,3],
z = eigen_matrix(l)$vectors[,3],
colvar = F
col = 1:length(unique(df.col)),
pch = 16
)
legend(
x = 'center',
y = 'groups',
legend = unique(df.col),
col = 1:length(df.col),
pch = 16
)
################################################################################
# downloading packages
################################################################################
# install.packages("plot3D")
################################################################################
# using downloaded packages
################################################################################
library("plot3D")
################################################################################
# using lib
################################################################################
source("lib.R")
################################################################################
# defining df and variables
################################################################################
df <- iris_df()
df.col <- iris_color_index()
epsilon <- 0.1
alpha <- 0.5
################################################################################
# create the diffusion matrix from a normalized df
################################################################################
l <- as.matrix(
x = dist(
data.frame(
apply(
X = df,
MARGIN = 2,
FUN = normalize_column
)
)
)
)
################################################################################
# saving the eigenvectors plot by: defining the filename, ploting and saving
################################################################################
scatter3D(
x = eigen_matrix(l)$vectors[,2],
y = eigen_matrix(l)$vectors[,3],
z = eigen_matrix(l)$vectors[,3],
colvar = NULL,
col = 1:length(unique(df.col)),
pch = 16
)
legend(
x = 'center',
y = 'groups',
legend = unique(df.col),
col = 1:length(df.col),
pch = 16
)
scatter3D(
x = eigen_matrix(l)$vectors[,2],
y = eigen_matrix(l)$vectors[,3],
z = eigen_matrix(l)$vectors[,3],
colvar = NULL,
col = 1:length(unique(df.col)),
pch = 16
)
scatter3D(
x = eigen_matrix(l)$vectors[,2],
y = eigen_matrix(l)$vectors[,3],
z = eigen_matrix(l)$vectors[,3],
col = 1:length(unique(df.col)),
pch = 16
)
scatter3D(
x = eigen_matrix(l)$vectors[,2],
y = eigen_matrix(l)$vectors[,3],
z = eigen_matrix(l)$vectors[,3],
colvar = NULL,
col = 1:length(unique(df.col)),
pch = 16
)
legend(
x = 'left',
y = 'groups',
legend = unique(df.col),
col = 1:length(df.col),
pch = 16
)
legend(
x = 'left',
legend = unique(df.col),
col = 1:length(df.col),
pch = 16
)
scatter3D(
x = eigen_matrix(l)$vectors[,2],
y = eigen_matrix(l)$vectors[,3],
z = eigen_matrix(l)$vectors[,4],
colvar = NULL,
col = 1:length(unique(df.col)),
pch = 16
)
legend(
x = 1
legend = unique(df.col),
col = 1:length(df.col),
pch = 16
)
legend(
x = 1,
legend = unique(df.col),
col = 1:length(df.col),
pch = 16
)
legend(
x = 'bottomleft',
legend = unique(df.col),
col = 1:length(df.col),
pch = 16
)
plot(
x = eigen_matrix(l)$vectors[,2],
y = eigen_matrix(l)$vectors[,3],
z = eigen_matrix(l)$vectors[,4],
colvar = NULL,
col = 1:length(unique(df.col)),
pch = 16
)
plot(
x = eigen_matrix(l)$vectors[,2],
y = eigen_matrix(l)$vectors[,3],
colvar = NULL,
col = 1:length(unique(df.col)),
pch = 16
)
plot(
x = eigen_matrix(l)$vectors[,2],
y = eigen_matrix(l)$vectors[,3],
col = 1:length(unique(df.col)),
pch = 16
)
legend(
x = 'bottomleft',
legend = unique(df.col),
col = 1:length(df.col),
pch = 16
)
legend(
x = 'center',
legend = unique(df.col),
col = 1:length(df.col),
pch = 16
)
plot(
x = eigen_matrix(l)$vectors[,2],
y = eigen_matrix(l)$vectors[,3],
col = 1:length(unique(df.col)),
pch = 16
)
legend(
x = 'center',
legend = unique(df.col),
col = 1:length(df.col),
pch = 16
)
scatter3D(
x = eigen_matrix(l)$vectors[,2],
y = eigen_matrix(l)$vectors[,3],
z = eigen_matrix(l)$vectors[,4],
colvar = NULL,
col = 1:length(unique(df.col)),
pch = 16
)
legend(
x = 'bottomleft',
legend = unique(df.col),
col = 1:length(df.col),
pch = 16
)
scatter3D(
x = eigen_matrix(l)$vectors[,2],
y = eigen_matrix(l)$vectors[,3],
z = eigen_matrix(l)$vectors[,4],
colvar = NULL,
col = 1:length(unique(df.col)),
pch = 16,
theta = 15,
phi, 20
)
scatter3D(
x = eigen_matrix(l)$vectors[,2],
y = eigen_matrix(l)$vectors[,3],
z = eigen_matrix(l)$vectors[,4],
colvar = NULL,
col = 1:length(unique(df.col)),
pch = 16,
theta = 15,
phi = 20
)
scatter3D(
x = eigen_matrix(l)$vectors[,2],
y = eigen_matrix(l)$vectors[,3],
z = eigen_matrix(l)$vectors[,4],
colvar = NULL,
col = 1:length(unique(df.col)),
pch = 16,
theta = 15,
phi = 2
)
scatter3D(
x = eigen_matrix(l)$vectors[,2],
y = eigen_matrix(l)$vectors[,3],
z = eigen_matrix(l)$vectors[,4],
colvar = NULL,
col = 1:length(unique(df.col)),
pch = 16,
theta = 15,
phi = 20
)
scatter3D(
x = eigen_matrix(l)$vectors[,2],
y = eigen_matrix(l)$vectors[,3],
z = eigen_matrix(l)$vectors[,4],
colvar = NULL,
col = 1:length(unique(df.col)),
pch = 16,
theta = 15,
phi = 40
)
scatter3D(
x = eigen_matrix(l)$vectors[,2],
y = eigen_matrix(l)$vectors[,3],
z = eigen_matrix(l)$vectors[,4],
colvar = NULL,
col = 1:length(unique(df.col)),
pch = 16,
theta = 1,
phi = 40
)
scatter3D(
x = eigen_matrix(l)$vectors[,2],
y = eigen_matrix(l)$vectors[,3],
z = eigen_matrix(l)$vectors[,4],
colvar = NULL,
col = 1:length(unique(df.col)),
pch = 16,
theta = 20,
phi = 40
)
scatter3D(
x = eigen_matrix(l)$vectors[,2],
y = eigen_matrix(l)$vectors[,3],
z = eigen_matrix(l)$vectors[,4],
colvar = NULL,
col = 1:length(unique(df.col)),
pch = 16,
theta = 15,
phi = 40
)
scatter3D(
x = eigen_matrix(l)$vectors[,2],
y = eigen_matrix(l)$vectors[,3],
z = eigen_matrix(l)$vectors[,4],
colvar = NULL,
col = 1:length(unique(df.col)),
pch = 16,
theta = 40,
phi = 40
)
scatter3D(
x = eigen_matrix(l)$vectors[,2],
y = eigen_matrix(l)$vectors[,3],
z = eigen_matrix(l)$vectors[,4],
colvar = NULL,
col = 1:length(unique(df.col)),
pch = 16
)
scatter3D(
x = eigen_matrix(l)$vectors[,2],
y = eigen_matrix(l)$vectors[,3],
z = eigen_matrix(l)$vectors[,4],
colvar = NULL,
col = 1:length(unique(df.col)),
pch = 16,
theta = 0,
phi = 0
)
scatter3D(
x = eigen_matrix(l)$vectors[,2],
y = eigen_matrix(l)$vectors[,3],
z = eigen_matrix(l)$vectors[,4],
colvar = NULL,
col = 1:length(unique(df.col)),
pch = 16,
theta = 0,
phi = 20
)
scatter3D(
x = eigen_matrix(l)$vectors[,2],
y = eigen_matrix(l)$vectors[,3],
z = eigen_matrix(l)$vectors[,4],
colvar = NULL,
col = 1:length(unique(df.col)),
pch = 16,
theta = 0,
phi = 30
)
scatter3D(
x = eigen_matrix(l)$vectors[,2],
y = eigen_matrix(l)$vectors[,3],
z = eigen_matrix(l)$vectors[,4],
colvar = NULL,
col = 1:length(unique(df.col)),
pch = 16,
theta = 0,
phi = 40
)
scatter3D(
x = eigen_matrix(l)$vectors[,2],
y = eigen_matrix(l)$vectors[,3],
z = eigen_matrix(l)$vectors[,4],
colvar = NULL,
col = 1:length(unique(df.col)),
pch = 16,
theta = 0
)
scatter3D(
x = eigen_matrix(l)$vectors[,2],
y = eigen_matrix(l)$vectors[,3],
z = eigen_matrix(l)$vectors[,4],
colvar = NULL,
col = 1:length(unique(df.col)),
pch = 16,
theta = 40
)
scatter3D(
x = eigen_matrix(l)$vectors[,2],
y = eigen_matrix(l)$vectors[,3],
z = eigen_matrix(l)$vectors[,4],
colvar = NULL,
col = 1:length(unique(df.col)),
pch = 16,
theta = 80
)
scatter3D(
x = eigen_matrix(l)$vectors[,2],
y = eigen_matrix(l)$vectors[,3],
z = eigen_matrix(l)$vectors[,4],
colvar = NULL,
col = 1:length(unique(df.col)),
pch = 16,
theta = 90
)
scatter3D(
x = eigen_matrix(l)$vectors[,2],
y = eigen_matrix(l)$vectors[,3],
z = eigen_matrix(l)$vectors[,4],
colvar = NULL,
col = 1:length(unique(df.col)),
pch = 16,
theta = 45
)
scatter3D(
x = eigen_matrix(l)$vectors[,2],
y = eigen_matrix(l)$vectors[,3],
z = eigen_matrix(l)$vectors[,4],
colvar = NULL,
col = 1:length(unique(df.col)),
pch = 16,
theta = 45,
phi = 45
)
legend(
x = 'bottomleft',
legend = unique(df.col),
col = 1:length(df.col),
pch = 16
)
if(length("plot3D")) install.packages("plot3D")
if(length("plot3D") > 0) install.packages("plot3D")
length("plot3D")
length("abc")
length(plot3D)
!require(plot3D)
require(plot3D)
!require(plot3D)
