################################################################################
df <- iris_df()
df.col <- iris_color_index()
epsilon <- 0.1
alpha <- 0.5
################################################################################
# create the diffusion matrix from a normalized df
################################################################################
l <- as.matrix(
x = dist(
data.frame(
apply(
X = df,
MARGIN = 2,
FUN = normalize_column
)
)
)
)
################################################################################
# saving the eigenvectors plot by: defining the filename, ploting and saving
################################################################################
par(mfrow=c(1,2))
plot(
x = eigen_matrix(l)$vectors[,2],
y = eigen_matrix(l)$vectors[,3],
col = df.col,
pch = 16,
xlab = "",
ylab = ""
)
scatter3D(
x = eigen_matrix(l)$vectors[,2],
y = eigen_matrix(l)$vectors[,3],
z = eigen_matrix(l)$vectors[,4],
colvar = NULL,
col = df.col,
pch = 16,
theta = 45,
phi = 45
)
legend(
x = 'bottomleft',
legend = levels(df.col),
col = 1:length(df.col),
pch = 16
)
################################################################################
# downloading packages
################################################################################
# install.packages("plot3D")
################################################################################
# using downloaded packages
################################################################################
library("plot3D")
################################################################################
# using lib
################################################################################
source("lib.R")
################################################################################
# defining df and variables
################################################################################
df <- iris_df()
df.col <- iris_color_index()
epsilon <- 0.1
alpha <- 0.5
################################################################################
# create the diffusion matrix from a normalized df
################################################################################
l <- as.matrix(
x = dist(
data.frame(
apply(
X = df,
MARGIN = 2,
FUN = normalize_column
)
)
)
)
################################################################################
# saving the eigenvectors plot by: defining the filename, ploting and saving
################################################################################
par(mfrow=c(1,2))
plot(
x = eigen_matrix(l)$vectors[,2],
y = eigen_matrix(l)$vectors[,3],
col = df.col,
pch = 16,
xlab = "",
ylab = ""
)
scatter3D(
x = eigen_matrix(l)$vectors[,2],
y = eigen_matrix(l)$vectors[,3],
z = eigen_matrix(l)$vectors[,4],
colvar = NULL,
col = df.col,
pch = 16,
theta = 45,
phi = 45
)
legend(
x = 'bottomleft',
legend = unique(df.col),
col = 1:length(df.col),
pch = 16
)
unique(df.col)
levels(df.col)
unique(df.col)
par(mfrow=c(1,2))
plot(
x = eigen$vectors[,2],
y = eigen$vectors[,3],
col = df.col,
pch = 16,
xlab = "",
ylab = ""
)
scatter3D(
x = eigen$vectors[,2],
y = eigen$vectors[,3],
z = eigen$vectors[,4],
colvar = NULL,
col = df.col,
pch = 16,
theta = 45,
phi = 45
)
################################################################################
# downloading packages
################################################################################
# install.packages("plot3D")
################################################################################
# using downloaded packages
################################################################################
library("plot3D")
################################################################################
# using lib
################################################################################
source("lib.R")
################################################################################
# defining df and variables
################################################################################
df <- iris_df()
df.col <- iris_color_index()
################################################################################
# create the diffusion matrix from a normalized df
################################################################################
eigen <- eigen_matrix(
as.matrix(
x = dist(
data.frame(
apply(
X = df,
MARGIN = 2,
FUN = normalize_column
)
)
)
)
)
################################################################################
# saving the eigenvectors plot by: defining the filename, ploting and saving
################################################################################
par(mfrow=c(1,2))
plot(
x = eigen$vectors[,2],
y = eigen$vectors[,3],
col = df.col,
pch = 16,
xlab = "",
ylab = ""
)
scatter3D(
x = eigen$vectors[,2],
y = eigen$vectors[,3],
z = eigen$vectors[,4],
colvar = NULL,
col = df.col,
pch = 16,
theta = 45,
phi = 45
)
legend(
x = 'bottomleft',
legend = unique(df.col),
col = 1:length(df.col),
pch = 16
)
################################################################################
# downloading packages
################################################################################
# install.packages("plot3D")
################################################################################
# using downloaded packages
################################################################################
library("plot3D")
################################################################################
# using lib
################################################################################
source("lib.R")
################################################################################
# defining df and variables
################################################################################
df <- iris_df()
df.col <- iris_color_index()
################################################################################
# create the diffusion matrix from a normalized df
################################################################################
eigen <- eigen_matrix(
as.matrix(
x = dist(
data.frame(
apply(
X = df,
MARGIN = 2,
FUN = normalize_column
)
)
)
)
)
################################################################################
# saving the eigenvectors plot by: defining the filename, ploting and saving
################################################################################
par(mfrow=c(1,2))
plot(
x = eigen$vectors[,2],
y = eigen$vectors[,3],
col = df.col,
pch = 16,
xlab = "",
ylab = ""
)
scatter3D(
x = eigen$vectors[,2],
y = eigen$vectors[,3],
z = eigen$vectors[,4],
colvar = NULL,
col = df.col,
pch = 16,
theta = 45,
phi = 45
)
legend(
x = 'bottomleft',
legend = unique(df.col),
col = 1:length(df.col),
pch = 16
)
################################################################################
# downloading packages
################################################################################
# install.packages("plot3D")
################################################################################
# using downloaded packages
################################################################################
library("plot3D")
################################################################################
# using lib
################################################################################
source("lib.R")
################################################################################
# loop through the df folder
################################################################################
for(i in dir(path = "datasets", pattern = "*.csv", full.names = T))
{
file <- read.table(i)
df <- gen_df(file)
df.col <- gen_color_index(file)
##############################################################################
# saving the eigenvectors plot by: defining the filename, ploting and saving
##############################################################################
par(mfrow=c(1,2))
plot(
x = df$V1,
y = df$V2,
col = df.col + 1,
pch = 16,
xlab = "",
ylab = ""
)
scatter3D(
x = df$V1,
y = df$V2,
z = df$V3,
colvar = NULL,
col = df.col + 1,
pch = 16,
theta = 45,
phi = 45
)
legend(
x = 'bottomleft',
legend = unique(df.col),
col = 1:length(df.col),
pch = 16
)
dev.copy(
png,
paste(
substr(
x = i,
start = 1,
stop = nchar(i)-3
),
"png",
sep = ""
),
width = 8,
height = 6,
units = "in",
res = 100
)
dev.off()
}
library(ggplot2)
ggplot(iris, aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
set.seed(20)
irisCluster <- kmeans(iris[, 3:4], 3, nstart = 20)
irisCluster
table(irisCluster$cluster, iris$Species)
irisCluster$cluster <- as.factor(irisCluster$cluster)
ggplot(iris, aes(Petal.Length, Petal.Width, color = iris$cluster)) + geom_point()
library(ggplot2)
ggplot(iris, aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
set.seed(20)
irisCluster <- kmeans(iris[, 3:4], 3, nstart = 20)
irisCluster
table(irisCluster$cluster, iris$Species)
irisCluster$cluster <- as.factor(irisCluster$cluster)
ggplot(iris, aes(Petal.Length, Petal.Width, color = iris$cluster)) + geom_point()
iris$cluster
library(ggplot2)
ggplot(iris, aes(Petal.Length, Petal.Width, color = Species)) + geom_point()
set.seed(20)
irisCluster <- kmeans(iris[, 3:4], 3, nstart = 20)
irisCluster
table(irisCluster$cluster, iris$Species)
irisCluster$cluster <- as.factor(irisCluster$cluster)
ggplot(iris, aes(Petal.Length, Petal.Width, color = irisCluster$cluster)) + geom_point()
datasets/oc_12_2500_1000_1.0_p019_0710_1.txt
read.table("datasets/oc_12_2500_1000_1.0_p019_0710_1.txt")
read.table("datasets/oc_12_2500_1000_1.0_p019_0710_1.eigen.csv")
library(ggplot2)
ggplot(
read.table("datasets/oc_12_2500_1000_1.0_p019_0710_1.eigen.csv"),
aes(
V!,
V2,
color = V5
)
) + geom_point()
read.table("datasets/oc_12_2500_1000_1.0_p019_0710_1.eigen.csv")
ggplot(
read.table("datasets/oc_12_2500_1000_1.0_p019_0710_1.eigen.csv"),
aes(
V!,
V2,
color = V5
)
) + geom_point()
ggplot(
read.table("datasets/oc_12_2500_1000_1.0_p019_0710_1.eigen.csv"),
aes(
V1,
V2,
color = V5
)
) + geom_point()
library(ggplot2)
ggplot(
read.table("datasets/oc_12_2500_1000_1.0_p019_0710_1.eigen.csv"),
aes(
V1,
V2,
color = V5
)
) + geom_point()
set.seed(20)
irisCluster <- kmeans(file[, 1:2], 2)
file <- read.table("datasets/oc_12_2500_1000_1.0_p019_0710_1.eigen.csv")
ggplot(
file,
aes(
V1,
V2,
color = V5
)
) + geom_point()
set.seed(20)
irisCluster <- kmeans(file[, 1:2], 2)
irisCluster
table(irisCluster$cluster, iris$Species)
table(irisCluster$cluster, file$V5)
irisCluster$cluster <- as.factor(irisCluster$cluster)
ggplot(iris, aes(Petal.Length, Petal.Width, color = irisCluster$cluster)) + geom_point()
ggplot(
file,
aes(
V1,
V2,
color = irisCluster$cluster
)
) + geom_point()
library(ggplot2)
file <- read.table("datasets/oc_12_2500_1000_1.0_p019_0710_1.eigen.csv")
ggplot(
file,
aes(
V1,
V2,
color = V5
)
) + geom_point()
set.seed(20)
irisCluster <- kmeans(file[, 1:2], 2)
irisCluster
table(irisCluster$cluster, file$V5)
irisCluster$cluster <- as.factor(irisCluster$cluster)
ggplot(
file,
aes(
V1,
V2,
color = irisCluster$cluster
)
) + geom_point()
irisCluster <- kmeans(file[, 1:3], 2)
irisCluster
table(irisCluster$cluster, file$V5)
irisCluster <- kmeans(file[, 1:3], 2)
irisCluster
table(irisCluster$cluster, file$V5)
irisCluster <- kmeans(file[, 1:3], 3)
irisCluster
table(irisCluster$cluster, file$V5)
irisCluster$cluster <- as.factor(irisCluster$cluster)
ggplot(
file,
aes(
V1,
V2,
color = irisCluster$cluster
)
) + geom_point()
library(ggplot2)
file <- read.table("datasets/oc_12_2500_1000_1.0_p019_0710_1.eigen.csv")
ggplot(
file,
aes(
V1,
V2,
color = V5
)
) + geom_point()
ggplot(
file,
aes(
V1,
V2,
color = V5
)
)
ggplot(
file,
aes(
V1,
V2,
color = V5
)
) + geom_point()
set.seed(20)
irisCluster <- kmeans(file[, 1:3], 2)
file[, 1:3]
irisCluster <- kmeans(file[, 1:3], 2)
irisCluster
table(irisCluster$cluster, file$V5)
irisCluster$cluster <- as.factor(irisCluster$cluster)
ggplot(
file,
aes(
V1,
V2,
color = irisCluster$cluster
)
) + geom_point()
library(ggplot2)
file <- read.table("datasets/oc_12_2500_1000_1.0_p019_0710_1.eigen.csv")
ggplot(
file,
aes(
V1,
V2,
color = V5
)
) + geom_point()
set.seed(20)
irisCluster <- kmeans(file[, 1:3], 2)
irisCluster
table(irisCluster$cluster, file$V5)
irisCluster$cluster <- as.factor(irisCluster$cluster)
ggplot(
file,
aes(
V1,
V2,
color = irisCluster$cluster
)
) + geom_point()
